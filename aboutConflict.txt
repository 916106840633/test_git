------------------实验1-------------------------
gitee上增加文件newFile_gitee
local上增加文件newFile_local
local上尝试push，有冲突
进行pull操作，冲突就解决了（不需要人为鉴别，因为没有对一个文件同时进行的操作）
local也有了newFile_gitee
然后再进行push就行了


------------------实验2-------------------------
起因：gitee和local上同时对newFile_loacl的内容进行了修改
gitee上先commit到master了
现在尝试从local push到gitee的master上

tlh@DESKTOP-8G7THB4 MINGW64 /e/test_git (master)
$ git push gitee master		########首先尝试了进行push，遇到问题是远程的内容相较于本地已经发生变化了
To gitee.com:tanglinghua/test_git.git
 ! [rejected]        master -> master (fetch first)
error: failed to push some refs to 'gitee.com:tanglinghua/test_git.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.


##########先和前面一样尝试pull 以统一内容
/*这里和前面不一样的是
前面只是 两者同时加了个新文件 文件的增删很快就统一了
这里是两者在同一个文件上进行修改，于是产生冲突，而这种冲突需要人为鉴别和消除*/

tlh@DESKTOP-8G7THB4 MINGW64 /e/test_git (master)
$ git pull gitee master
remote: Enumerating objects: 5, done.
remote: Counting objects: 100% (5/5), done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 3 (delta 1), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), 1.03 KiB | 5.00 KiB/s, done.
From gitee.com:tanglinghua/test_git
 * branch            master     -> FETCH_HEAD
   a241c99..3513754  master     -> gitee/master
Auto-merging newFile_local.txt
CONFLICT (content): Merge conflict in newFile_local.txt
Automatic merge failed; fix conflicts and then commit the result.

tlh@DESKTOP-8G7THB4 MINGW64 /e/test_git (master|MERGING)
$ git status		##########用该命令查看状态 发现确实冲突了
On branch master
You have unmerged paths.
  (fix conflicts and run "git commit")
  (use "git merge --abort" to abort the merge)

Unmerged paths:
  (use "git add <file>..." to mark resolution)
        both modified:   newFile_local.txt

no changes added to commit (use "git add" and/or "git commit -a")

/*冲突内容本身已经在文本内写出了
打开相应的文件就能看到了
那么如何做才是修改完成呢？
就是人修改好了，再次add这个文件，就说明人为已经处理了修改*/

tlh@DESKTOP-8G7THB4 MINGW64 /e/test_git (master|MERGING)
$ git add newFile_local.txt

tlh@DESKTOP-8G7THB4 MINGW64 /e/test_git (master|MERGING)
$ git commit -m "conflict fixed"
[master cf4edaf] conflict fixed

tlh@DESKTOP-8G7THB4 MINGW64 /e/test_git (master)
$ git push gitee master
Enumerating objects: 10, done.
Counting objects: 100% (10/10), done.
Delta compression using up to 6 threads
Compressing objects: 100% (6/6), done.
Writing objects: 100% (6/6), 708 bytes | 708.00 KiB/s, done.
Total 6 (delta 4), reused 0 (delta 0), pack-reused 0
remote: Powered by GITEE.COM [GNK-5.0]
To gitee.com:tanglinghua/test_git.git
   3513754..cf4edaf  master -> master


/*所以前面为什么将本地项目不能直接push到gitee上?
因为我是预先在gitee上创建仓库然后push，预先创建的仓库本身带了一个本地没有的README.md
所以push出错了， 当时是采取强制push -f 把README.md给覆盖掉了
其实正确的处理方法应该是 先pull下来README.md 本地会多一个README.md 然后在进行push
*/

/*
冲突有很多
本质上就是两者同时对一个文件进行了操作 就可以视为冲突
而前面那种多一个少一个文件的冲突，其实两者并没有在同一个文件上进行操作，所以pull一下统一了就行了

然而，像同一个文件进行操作（删改， 一个要删除这个文件，一个要改这个文件），那么这个冲突就会产生，而这种冲突需要人来决断

*/

------------------实验3-------------------------

下面就进行实验  一个要删除这个文件，一个要改这个文件
首先gitee和local都有一样的文件delete_or_update
gitee上将这个文件删除
local上将这个文件内容修改
现在在local上尝试将修改push到gitee上
tlh@DESKTOP-8G7THB4 MINGW64 /e/test_git (master)
$ git push gitee master
To gitee.com:tanglinghua/test_git.git
 ! [rejected]        master -> master (fetch first)
error: failed to push some refs to 'gitee.com:tanglinghua/test_git.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

//首先和预想的一样有冲突
//那么是直接多一个少一个文件的冲突 还是要人为鉴定的冲突呢？

tlh@DESKTOP-8G7THB4 MINGW64 /e/test_git (master)
$ git pull gitee master
remote: Enumerating objects: 3, done.
remote: Counting objects: 100% (3/3), done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 2 (delta 1), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (2/2), 246 bytes | 3.00 KiB/s, done.
From gitee.com:tanglinghua/test_git
 * branch            master     -> FETCH_HEAD
   54548d7..afd56c8  master     -> gitee/master
CONFLICT (modify/delete): delete_or_update.txt deleted in afd56c8148527da5e82e13be90e40dc2dc2c75b9 and modified in HEAD. Version HEAD of delete_or_update.txt left in tree.
Automatic merge failed; fix conflicts and then commit the result.


//和预想的一样是需要人为鉴定的冲突， 可以发现只要是两者在同一个文件上进行操作（删改）就需要人为鉴别

tlh@DESKTOP-8G7THB4 MINGW64 /e/test_git (master|MERGING)
$ git status
On branch master
You have unmerged paths.
  (fix conflicts and run "git commit")
  (use "git merge --abort" to abort the merge)

Unmerged paths:
  (use "git add/rm <file>..." as appropriate to mark resolution)
        deleted by them: delete_or_update.txt

no changes added to commit (use "git add" and/or "git commit -a")


tlh@DESKTOP-8G7THB4 MINGW64 /e/test_git (master|MERGING)
$ cat delete_or_update.txt
先创建这个文件
然后gitee和local都统一
然后gitee上删除，local上修改
local上尝试push，看看会有什么问题


//内容上  因为一个是删除文件 所以没有对比内容



1+1=2  update on local
tlh@DESKTOP-8G7THB4 MINGW64 /e/test_git (master|MERGING)
$ git add delete_or_update.txt

tlh@DESKTOP-8G7THB4 MINGW64 /e/test_git (master|MERGING)
$ git commit -m "fix conflict in delete_or_update.txt"
[master e638c7f] fix conflict in delete_or_update.txt

//重新add并commit这个文件 完成冲突的修复

tlh@DESKTOP-8G7THB4 MINGW64 /e/test_git (master)
$ git push gitee master
Enumerating objects: 10, done.
Counting objects: 100% (9/9), done.
Delta compression using up to 6 threads
Compressing objects: 100% (5/5), done.
Writing objects: 100% (5/5), 609 bytes | 609.00 KiB/s, done.
Total 5 (delta 3), reused 0 (delta 0), pack-reused 0
remote: Powered by GITEE.COM [GNK-5.0]
To gitee.com:tanglinghua/test_git.git
   afd56c8..e638c7f  master -> master

//成功实现push



*********冲突的本质***************
如果说对项目文件的修改是原子操作，大家都是串联顺序的进行修改，那么就不会有冲突产生
但是这里项目是并行开发的，大家可以同时对项目进行修改，
项目作为临界资源就会产生冲突。
需要人为鉴别的冲突就是在同一文件上并行进行操作的冲突
****************************
当然，如果只是一个人开发，只是把gitee当一个仓库用，那么根本不会有冲突产生
因为，没有人和你一起并行操作这个项目